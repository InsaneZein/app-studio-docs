export default PrimaryToolbar;
declare class PrimaryToolbar extends React.Component<any, any, any> {
    constructor(props: any);
    constructor(props: any, context: any);
}
declare namespace PrimaryToolbar {
    namespace propTypes {
        const id: PropTypes.Requireable<string | number>;
        const className: PropTypes.Requireable<string>;
        const toggleIsExpanded: PropTypes.Requireable<(...args: any[]) => any>;
        const bulkSelect: PropTypes.Requireable<PropTypes.InferProps<PropTypes.ValidationMap<any>>>;
        const filterConfig: PropTypes.Requireable<PropTypes.InferProps<{
            id: PropTypes.Requireable<string>;
            isDisabled: PropTypes.Requireable<boolean>;
            useMobileLayout: PropTypes.Requireable<boolean>;
            value: PropTypes.Requireable<string>;
            placeholder: PropTypes.Requireable<string>;
            onChange: PropTypes.Requireable<(...args: any[]) => any>;
            hideLabel: PropTypes.Requireable<boolean>;
            items: PropTypes.Requireable<(PropTypes.InferProps<{
                id: PropTypes.Requireable<string>;
                label: PropTypes.Requireable<PropTypes.ReactNodeLike>;
                value: PropTypes.Requireable<string>;
                type: PropTypes.Requireable<string>;
                filterValues: PropTypes.Requireable<PropTypes.InferProps<{
                    value: PropTypes.Requireable<string>;
                    placeholder: PropTypes.Requireable<string>;
                    onChange: PropTypes.Requireable<(...args: any[]) => any>;
                }> | PropTypes.InferProps<{
                    value: PropTypes.Requireable<PropTypes.InferProps<{}>>;
                    items: PropTypes.Requireable<(PropTypes.InferProps<{
                        label: PropTypes.Requireable<PropTypes.ReactNodeLike>;
                        value: PropTypes.Requireable<string>;
                    }> | null | undefined)[]>;
                    placeholder: PropTypes.Requireable<string>;
                    onChange: PropTypes.Requireable<(...args: any[]) => any>;
                }>>;
            }> | null | undefined)[]>;
        }>>;
        const dedicatedAction: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        const pagination: PropTypes.Requireable<PropTypes.InferProps<any>>;
        const sortByConfig: PropTypes.Requireable<PropTypes.InferProps<{
            direction: PropTypes.Requireable<SortByDirection>;
            onSortChange: PropTypes.Requireable<(...args: any[]) => any>;
        }>>;
        const exportConfig: PropTypes.Requireable<PropTypes.InferProps<PropTypes.ValidationMap<any>>>;
        const activeFiltersConfig: PropTypes.Requireable<PropTypes.InferProps<{
            className: PropTypes.Requireable<string>;
            filters: PropTypes.Requireable<(PropTypes.InferProps<{
                category: PropTypes.Validator<string>;
                chips: PropTypes.Validator<(PropTypes.InferProps<{
                    name: PropTypes.Validator<string>;
                    isRead: PropTypes.Requireable<boolean>;
                    count: PropTypes.Requireable<number>;
                }> | null | undefined)[]>;
            }> | PropTypes.InferProps<{
                name: PropTypes.Validator<string>;
                isRead: PropTypes.Requireable<boolean>;
                count: PropTypes.Requireable<number>;
            }> | null | undefined)[]>;
            onDelete: PropTypes.Requireable<(...args: any[]) => any>;
            onDeleteGroup: PropTypes.Requireable<(...args: any[]) => any>;
            deleteTitle: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            showDeleteButton: PropTypes.Requireable<boolean>;
        }>>;
        const children: PropTypes.Requireable<PropTypes.ReactNodeLike>;
        const actionsConfig: PropTypes.Requireable<PropTypes.InferProps<{
            actions: PropTypes.Requireable<(string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray | null | undefined)[]>;
            dropdownProps: PropTypes.Requireable<PropTypes.InferProps<{}>>;
            onSelect: PropTypes.Requireable<(...args: any[]) => any>;
        }>>;
        const expandAll: PropTypes.Requireable<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        const useMobileLayout: PropTypes.Requireable<boolean>;
    }
}
import React from "react";
import PropTypes from "prop-types";
import { SortByDirection } from "@patternfly/react-table/dist/js/components/Table/SortColumn";
