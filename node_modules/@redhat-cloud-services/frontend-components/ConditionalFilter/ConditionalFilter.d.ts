export default ConditionalFilter;
declare class ConditionalFilter extends React.Component<any, any, any> {
    constructor(props: any);
    breakpointConstant: number;
    dropdownToggle: (isOpen: any) => void;
    onChange: (_e: any, value: any) => void;
    getWrapper: () => React.ExoticComponent<{
        children?: React.ReactNode;
    }> | ((props: any) => JSX.Element);
    updateFilterViewport: (width: any) => boolean;
    resizeListener: void | undefined;
}
declare namespace ConditionalFilter {
    namespace propTypes {
        const id: PropTypes.Requireable<string>;
        const isDisabled: PropTypes.Requireable<boolean>;
        const useMobileLayout: PropTypes.Requireable<boolean>;
        const value: PropTypes.Requireable<string>;
        const placeholder: PropTypes.Requireable<string>;
        const onChange: PropTypes.Requireable<(...args: any[]) => any>;
        const hideLabel: PropTypes.Requireable<boolean>;
        const items: PropTypes.Requireable<(PropTypes.InferProps<{
            id: PropTypes.Requireable<string>;
            label: PropTypes.Requireable<PropTypes.ReactNodeLike>;
            value: PropTypes.Requireable<string>;
            type: PropTypes.Requireable<string>;
            filterValues: PropTypes.Requireable<PropTypes.InferProps<{
                value: PropTypes.Requireable<string>;
                placeholder: PropTypes.Requireable<string>;
                onChange: PropTypes.Requireable<(...args: any[]) => any>;
            }> | PropTypes.InferProps<{
                value: PropTypes.Requireable<PropTypes.InferProps<{}>>;
                items: PropTypes.Requireable<(PropTypes.InferProps<{
                    label: PropTypes.Requireable<PropTypes.ReactNodeLike>;
                    value: PropTypes.Requireable<string>;
                }> | null | undefined)[]>;
                placeholder: PropTypes.Requireable<string>;
                onChange: PropTypes.Requireable<(...args: any[]) => any>;
            }>>;
        }> | null | undefined)[]>;
    }
    namespace defaultProps {
        const value_1: string;
        export { value_1 as value };
        const items_1: never[];
        export { items_1 as items };
        const hideLabel_1: boolean;
        export { hideLabel_1 as hideLabel };
        const isDisabled_1: boolean;
        export { isDisabled_1 as isDisabled };
        const id_1: string;
        export { id_1 as id };
        const useMobileLayout_1: boolean;
        export { useMobileLayout_1 as useMobileLayout };
    }
}
import React from "react";
import PropTypes from "prop-types";
