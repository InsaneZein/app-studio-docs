var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState } from 'react';
import { getDefaultOUIAId } from '@patternfly/react-core/';
import { Dropdown, DropdownToggle, Level } from '@patternfly/react-core';
import FilterInput from './FilterInput';
import '../Filters/filter-dropdown.css';
var ouiaStateId = getDefaultOUIAId('RHI/FilterDropdown');
var FilterDropdown = function (_a) {
    var hideCategories = _a.hideCategories, filters = _a.filters, filterCategories = _a.filterCategories, label = _a.label, _b = _a.ouiaId, ouiaId = _b === void 0 ? ouiaStateId : _b, _c = _a.ouiaSafe, ouiaSafe = _c === void 0 ? true : _c, addFilter = _a.addFilter, removeFilter = _a.removeFilter, props = __rest(_a, ["hideCategories", "filters", "filterCategories", "label", "ouiaId", "ouiaSafe", "addFilter", "removeFilter"]);
    var _d = useState(false), isOpen = _d[0], setIsOpen = _d[1];
    var addRemoveFilters = function (selectedValue, filterName, type, isChecked) {
        if (type === 'checkbox') {
            isChecked ? addFilter === null || addFilter === void 0 ? void 0 : addFilter(filterName, selectedValue, type) : removeFilter === null || removeFilter === void 0 ? void 0 : removeFilter(filterName, selectedValue);
        }
        else {
            addFilter === null || addFilter === void 0 ? void 0 : addFilter(filterName, selectedValue, type);
        }
    };
    return (React.createElement(Dropdown, __assign({ className: "ins-c-filter__dropdown" }, props, { toggle: React.createElement(DropdownToggle, { ouiaId: ouiaId, ouiaSafe: ouiaSafe, onToggle: function (isOpen) { return setIsOpen(isOpen); } }, label), isOpen: isOpen, ouiaId: ouiaId, ouiaSafe: ouiaSafe }),
        React.createElement("div", { className: "pf-c-dropdown__menu-item" }, filterCategories === null || filterCategories === void 0 ? void 0 : filterCategories.map(function (data, index) {
            var _a;
            return !(hideCategories === null || hideCategories === void 0 ? void 0 : hideCategories.includes(data === null || data === void 0 ? void 0 : data.urlParam)) && (React.createElement(Level, { key: "".concat(data.urlParam).concat(index) },
                data.title || '', (_a = data.values) === null || _a === void 0 ? void 0 :
                _a.map(function (item, key) { return (React.createElement(FilterInput, { key: "check".concat(index).concat(key), "aria-label": item.label, id: "".concat(data.urlParam).concat(key), label: item.label, addRemoveFilters: addRemoveFilters, param: data.urlParam, type: data.type, value: item.value, filters: filters })); }),
                index !== filterCategories.length - 1 && React.createElement("br", null)));
        }))));
};
export default FilterDropdown;
//# sourceMappingURL=FilterDropdown.js.map