var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var _a, _b;
import React, { Component, Fragment } from 'react';
import { Dropdown, DropdownItem, KebabToggle, Button, DropdownSeparator, ToolbarItem } from '@patternfly/react-core';
import PropTypes from 'prop-types';
import { DownloadButton } from '../DownloadButton';
export var overflowActionsMapper = function (action, key) { return (React.createElement(DropdownItem, __assign({}, action.props, { className: "ins-c-primary-toolbar__overflow-actions", key: action.value || action.key || "".concat(key, "-overflow"), component: (action.props && action.props.component) || React.isValidElement(action.label || action) ? 'div' : 'button', onClick: function (e) { return action.onClick && action.onClick(e, action, key); } }), action.label || action)); };
export var actionPropsGenerator = function (action, key) { return (__assign(__assign({}, action.props), { component: (action.props && action.props.component) || (React.isValidElement(action.label || action) ? 'div' : 'button'), onClick: function (e) { return action.onClick && action.onClick(e, action, key); }, children: action.label || action })); };
var Actions = (function (_super) {
    __extends(Actions, _super);
    function Actions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isOpen: false,
        };
        _this.toggleOpen = function (isOpen) {
            _this.setState({ isOpen: isOpen });
        };
        return _this;
    }
    Actions.prototype.render = function () {
        var _this = this;
        var isOpen = this.state.isOpen;
        var _a = this.props, actions = _a.actions, overflowActions = _a.overflowActions, onSelect = _a.onSelect, dropdownProps = _a.dropdownProps, kebabToggleProps = _a.kebabToggleProps, exportConfig = _a.exportConfig;
        var firstAction = actions[0], restActions = actions.slice(1);
        return (React.createElement(Fragment, null,
            firstAction && (React.createElement(ToolbarItem, { className: "ins-c-primary-toolbar__first-action pf-m-spacer-sm" }, firstAction.label ? (React.createElement(Button, __assign({ ouiaId: "".concat(firstAction.label) }, firstAction.props, { onClick: firstAction.onClick || (firstAction.props && firstAction.props.onClick) || undefined }), firstAction.label)) : (firstAction))),
            exportConfig && (exportConfig.extraItems || exportConfig.onSelect) && (React.createElement(ToolbarItem, { className: "pf-m-spacer-sm" },
                React.createElement(DownloadButton, __assign({}, exportConfig)))),
            ((actions && actions.length > 0) || overflowActions.length > 0) && (React.createElement(ToolbarItem, { className: "".concat(actions.length <= 1 ? 'ins-m-actions--empty' : '', " ins-c-primary-toolbar__actions pf-m-spacer-sm") },
                React.createElement(Dropdown, __assign({}, dropdownProps, { isOpen: isOpen, isPlain: true, onSelect: function () {
                        var props = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            props[_i] = arguments[_i];
                        }
                        onSelect && onSelect.apply(void 0, props);
                        _this.toggleOpen(false);
                    }, ouiaId: "Actions", toggle: React.createElement(KebabToggle, __assign({}, kebabToggleProps, { onToggle: function (isOpen) { return _this.toggleOpen(isOpen); } })), dropdownItems: __spreadArray(__spreadArray(__spreadArray(__spreadArray([], (firstAction
                        ? [
                            React.createElement(DropdownItem, __assign({ key: "first-action" }, actionPropsGenerator(firstAction, 'first-action'), { className: "ins-c-primary-toolbar__first-action ".concat((firstAction.props && firstAction.props.className) || '') })),
                        ]
                        : []), true), restActions.map(function (action, key) { return (React.createElement(DropdownItem, __assign({ key: action.key || (action && action.props && action.props.key) || key }, actionPropsGenerator(action, key)))); }), true), (actions.length > 0 && overflowActions.length > 0
                        ? [React.createElement(DropdownSeparator, { key: "separator", className: "ins-c-primary-toolbar__overflow-actions-separator" })]
                        : []), true), overflowActions.map(overflowActionsMapper), true) }))))));
    };
    return Actions;
}(Component));
var actionsType = PropTypes.arrayOf(PropTypes.oneOfType([
    PropTypes.node,
    PropTypes.shape({
        label: PropTypes.node,
        value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
        onClick: PropTypes.func,
        props: PropTypes.any,
    }),
    PropTypes.string,
]));
Actions.propTypes = {
    actions: actionsType,
    onSelect: PropTypes.func,
    overflowActions: actionsType,
    dropdownProps: PropTypes.shape((_a = {},
        _a[PropTypes.string] = PropTypes.any,
        _a)),
    kebabToggleProps: PropTypes.shape((_b = {},
        _b[PropTypes.string] = PropTypes.any,
        _b)),
    exportConfig: PropTypes.shape(DownloadButton.propTypes),
};
Actions.defaultProps = {
    actions: [],
    overflowActions: [],
    dropdownProps: {},
    exportConfig: {},
    onSelect: function () { return undefined; },
};
export default Actions;
//# sourceMappingURL=Actions.js.map