var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState } from 'react';
import { CaretDownIcon, CaretUpIcon, CheckIcon } from '@patternfly/react-icons';
import { Dropdown, DropdownDirection, DropdownItem, DropdownToggle } from '@patternfly/react-core';
var PaginationMenu = function (_a) {
    var _b = _a.itemsTitle, itemsTitle = _b === void 0 ? 'items' : _b, itemsStart = _a.itemsStart, itemsEnd = _a.itemsEnd, widtgetId = _a.widtgetId, _c = _a.dropDirection, dropDirection = _c === void 0 ? DropdownDirection.up : _c, onSetPerPage = _a.onSetPerPage, itemCount = _a.itemCount, _d = _a.perPageOptions, perPageOptions = _d === void 0 ? [] : _d, _e = _a.className, className = _e === void 0 ? '' : _e, perPage = _a.perPage, props = __rest(_a, ["itemsTitle", "itemsStart", "itemsEnd", "widtgetId", "dropDirection", "onSetPerPage", "itemCount", "perPageOptions", "className", "perPage"]);
    var _f = useState(false), isOpen = _f[0], setIsOpen = _f[1];
    var onSelect = function () { return setIsOpen(function (prev) { return !prev; }); };
    return (React.createElement("div", __assign({ className: "pf-c-options-menu ".concat(className) }, props),
        React.createElement("span", { id: "".concat(widtgetId, "-label"), hidden: true }, "Items per page:"),
        React.createElement("div", { className: "pf-c-options-menu__toggle pf-m-text pf-m-plain" },
            React.createElement(Dropdown, { direction: dropDirection, isPlain: true, isOpen: isOpen, onSelect: onSelect, dropdownItems: perPageOptions.map(function (_a) {
                    var title = _a.title, value = _a.value;
                    return (React.createElement(DropdownItem, { onClick: function (event) { return value !== perPage && onSetPerPage(event, value); }, key: value, component: "button" },
                        title,
                        value === perPage && React.createElement(CheckIcon, { className: "pf-c-options-menu__menu-item-icon", size: "md" })));
                }), toggle: React.createElement(DropdownToggle, { onToggle: function (isOpen) { return setIsOpen(isOpen); }, toggleIndicator: null, className: "pf-c-options-menu__toggle-button" },
                    React.createElement("span", { className: "pf-c-options-menu__toggle-text" },
                        React.createElement("b", null,
                            itemsStart,
                            " - ",
                            itemsEnd),
                        ' ',
                        "of ",
                        React.createElement("b", null, itemCount),
                        " ",
                        itemsTitle),
                    dropDirection === 'up' ? React.createElement(CaretUpIcon, null) : React.createElement(CaretDownIcon, null)) }))));
};
export default PaginationMenu;
//# sourceMappingURL=PaginationMenu.js.map