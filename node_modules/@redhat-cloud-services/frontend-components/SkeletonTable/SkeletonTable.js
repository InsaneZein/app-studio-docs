"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_table_1 = require("@patternfly/react-table");
var Skeleton_1 = require("../Skeleton");
var classnames_1 = __importDefault(require("classnames"));
require("./SkeletonTable.css");
var SkeletonTable = function (_a) {
    var _b = _a.canSelectAll, canSelectAll = _b === void 0 ? false : _b, _c = _a.isSelectable, isSelectable = _c === void 0 ? false : _c, sortBy = _a.sortBy, variant = _a.variant, _d = _a.isDark, isDark = _d === void 0 ? false : _d, _e = _a.colSize, colSize = _e === void 0 ? 0 : _e, columns = _a.columns, _f = _a.paddingColumnSize, paddingColumnSize = _f === void 0 ? 0 : _f, _g = _a.hasRadio, hasRadio = _g === void 0 ? false : _g, _h = _a.rowSize, rowSize = _h === void 0 ? 0 : _h;
    var newArray = function (size) { return __spreadArray([], Array(size), true); };
    var createColumns = function () {
        return __spreadArray([], Array(colSize), true).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.sm }) }); });
    };
    var getColumns = function () {
        return newArray(paddingColumnSize)
            .map(function () { return ''; })
            .concat(columns || createColumns());
    };
    var createRows = function () {
        var numberOfCols = columns ? columns.length : colSize;
        return newArray(rowSize).map(function () { return ({
            disableSelection: true,
            cells: newArray(paddingColumnSize)
                .map(function () { return ''; })
                .concat(newArray(numberOfCols).map(function () { return ({ title: react_1.default.createElement(Skeleton_1.Skeleton, { isDark: isDark, size: Skeleton_1.SkeletonSize.md }) }); })),
        }); });
    };
    var selectVariant = function () {
        return hasRadio ? (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.radio) || 'radio' : (react_table_1.RowSelectVariant === null || react_table_1.RowSelectVariant === void 0 ? void 0 : react_table_1.RowSelectVariant.checkbox) || 'checkbox';
    };
    return (react_1.default.createElement(react_table_1.Table, { className: (0, classnames_1.default)({
            'ins-c-skeleton-table__dark': isDark,
        }), cells: getColumns(), rows: createRows(), sortBy: sortBy, "aria-label": "Loading", onSelect: isSelectable ? function () { return undefined; } : undefined, selectVariant: isSelectable ? selectVariant() : undefined, canSelectAll: canSelectAll, variant: variant },
        react_1.default.createElement(react_table_1.TableHeader, null),
        react_1.default.createElement(react_table_1.TableBody, null)));
};
exports.default = SkeletonTable;
//# sourceMappingURL=SkeletonTable.js.map